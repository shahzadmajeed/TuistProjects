// Project-Beta.xcconfig
//
// Generated by Shahzad Majeed on 5/10/22
// https://xcodebuildsettings.com
// https://nshipster.com/xcconfig

#include "Project-Shared.xcconfig"
// #include "Warnings.xcconfig"

CONFIG_SUFFIX =
API_BASE_URL = www.api.testwebsite.com


// Debug Information Format
//
// The type of debug information to produce.
//
// * DWARF: Object files and linked products will use DWARF as the debug information
// format. [dwarf]
// * DWARF with dSYM File: Object files and linked products will use DWARF as the debug
// information format, and Xcode will also produce a dSYM file containing the debug
// information from the individual object files (except that a dSYM file is not needed
// and will not be created for static library or object file products). [dwarf-with-dsym]

DEBUG_INFORMATION_FORMAT = dwarf


// Generate Position-Dependent Code
//
// Faster function calls for applications. Not appropriate for shared libraries, which
// need to be position-independent.

GCC_DYNAMIC_NO_PIC  =  NO

// Dead Code Stripping
//
// Activating this setting causes the `-dead_strip` flag to be passed to `ld(1)` via
// `cc(1)` to turn on dead code stripping.


DEAD_CODE_STRIPPING = NO


// Enable Testability
//
// When this setting is activated, the product will be built with options appropriate for
// running automated tests, such as making private interfaces accessible to the tests.
// This may result in tests running slower than they would without testability enabled.


ENABLE_TESTABILITY = YES

// Optimization Level
//
// Specifies the degree to which the generated code is optimized for speed and binary
// size.
//
// * None: Do not optimize. [-O0]
// With this setting, the compiler's goal is to reduce the cost of compilation and to
// make debugging produce the expected results. Statements are independentâ€”if you stop
// the program with a breakpoint between statements, you can then assign a new value to
// any variable or change the program counter to any other statement in the function and
// get exactly the results you would expect from the source code.
// * Fast: Optimizing compilation takes somewhat more time, and a lot more memory for a
// large function. [-O1]
// With this setting, the compiler tries to reduce code size and execution time,
// without performing any optimizations that take a great deal of compilation time. In
// Apple's compiler, strict aliasing, block reordering, and inter-block scheduling are
// disabled by default when optimizing.
// * Faster: The compiler performs nearly all supported optimizations that do not
// involve a space-speed tradeoff. [-O2]
// With this setting, the compiler does not perform loop unrolling or function
// inlining, or register renaming. As compared to the `Fast` setting, this setting
// increases both compilation time and the performance of the generated code.
// * Fastest: Turns on all optimizations specified by the `Faster` setting and also
// turns on function inlining and register renaming options. This setting may result in a
// larger binary. [-O3]
// * Fastest, Smallest: Optimize for size. This setting enables all `Faster`
// optimizations that do not typically increase code size. It also performs further
// optimizations designed to reduce code size. [-Os]
// * Fastest, Aggressive Optimizations: This setting enables `Fastest` but also enables
// aggressive optimizations that may break strict standards compliance but should work
// well on well-behaved code. [-Ofast]
// * Smallest, Aggressive Size Optimizations: This setting enables additional size
// savings by isolating repetitive code patterns into a compiler generated function.
// [-Oz]

GCC_OPTIMIZATION_LEVEL = 0


// Preprocessor Macros
//
// Space-separated list of preprocessor macros of the form `foo` or `foo = bar`.

GCC_PREPROCESSOR_DEFINITIONS = DEBUG=1 $(inherited)


ONLY_ACTIVE_ARCH = YES


// Active Compilation Conditions
//
// A list of compilation conditions to enable for conditional compilation expressions.

SWIFT_ACTIVE_COMPILATION_CONDITIONS = DEBUG


// Validate Built Product
//
// If enabled, perform validation checks on the product as part of the build process.

VALIDATE_PRODUCT = NO


// Swift Compilation Mode
//
// This setting controls the way the Swift files in a module are rebuilt.
//
// * Incremental: Only rebuild the Swift source files in the module that are out of
// date, running multiple compiler processes as needed.
// * Whole Module: Always rebuild all Swift source files in the module, in a single
// compiler process.

SWIFT_COMPILATION_MODE = singlefile


// Swift Optimization Level
//
// * None: Compile without any optimization. [-Onone]
// * Optimize for Speed: [-O]
// * Optimize for Size: [-Osize]
// * Whole Module Optimization: [-O -whole-module-optimization]

SWIFT_OPTIMIZATION_LEVEL = -Onone


// Product Bundle Identifier
//
// A string that uniquely identifies the bundle. The string should be in reverse DNS
// format using only alphanumeric characters (`A-Z`, `a-z`, `0-9`), the dot (`.`), and
// the hyphen (`-`). This value is used as the `CFBundleIdentifier` in the `Info.plist`
// of the built bundle.

PRODUCT_BUNDLE_IDENTIFIER = $(BUNDLE_PREFIX)$(CONFIG_SUFFIX)
