// Project-Shared.xcconfig
//
// Generated by Shahzad Majeed on 5/10/22
// https://xcodebuildsettings.com
// https://nshipster.com/xcconfig

BUNDLE_PREFIX = io.tuist.DemoApp

// Base SDK
//
// The name or path of the base SDK being used during the build. The product will be
// built against the headers and libraries located inside the indicated SDK. This path
// will be prepended to all search paths, and will be passed through the environment to
// the compiler and linker. Additional SDKs can be specified in the `ADDITIONAL_SDKS`
// setting.

SDKROOT = iphoneos


// Swift Language Version
//
// Interpret input according to a specific Swift language version number.

SWIFT_VERSION = 5.6

// Targeted Device Families
//
// The build system uses the selected device to set the correct value for the `UIDeviceFamily` key it
// adds to the target's `Info.plist` file. This also drives the --target-device flag to actool, which determines
// the idioms selected during catalog compilation.

TARGETED_DEVICE_FAMILY = 1,2

// Supports Mac Catalyst
//
// Support building this target for Mac Catalyst.
SUPPORTS_MACCATALYST = NO

// Build Active Architecture Only
//
// If enabled, only the active architecture is built. This setting will be ignored when
// building with a run destination which does not define a specific architecture, such as
// a 'Generic Device' run destination.

ONLY_ACTIVE_ARCH = YES


// Excluded Architectures
//
// A list of architectures for which the target should not be built. These architectures
// will be removed from the list in `ARCHS` when the target is built. If the resulting
// list of architectures is empty, no binary will be produced. This can be used to
// declare architectures a target does not support for use in environments where `ARCHS`
// is being overridden at a higher level (e.g., via `xcodebuild`).

EXCLUDED_ARCHS =


// iOS Deployment Target
//
// Code will load on this and later versions of iOS. Framework APIs that are unavailable
// in earlier versions will be weak-linked; your code should check for null function
// pointers or specific system versions before calling newer APIs.

IPHONEOS_DEPLOYMENT_TARGET = 13.0


// Dead Code Stripping
//
// Activating this setting causes the `-dead_strip` flag to be passed to `ld(1)` via
// `cc(1)` to turn on dead code stripping.

DEAD_CODE_STRIPPING = NO


// Strip Debug Symbols During Copy
//
// Specifies whether binary files that are copied during the build, such as in a Copy
// Bundle Resources or Copy Files build phase, should be stripped of debugging symbols.
// It does not cause the linked product of a target to be strippedâ€”use
// `STRIP_INSTALLED_PRODUCT` for that.

COPY_PHASE_STRIP = NO


// Enable Bitcode
//
// Activating this setting indicates that the target or project should generate bitcode
// during compilation for platforms and architectures that support it. For Archive
// builds, bitcode will be generated in the linked binary for submission to the App
// Store. For other builds, the compiler and linker will check whether the code complies
// with the requirements for bitcode generation, but will not generate actual bitcode.

ENABLE_BITCODE = NO


// Provisioning Profile
//
// Must contain a profile name (or UUID). A missing or invalid profile will cause a build error.
// Use in conjunction with [DEVELOPMENT_TEAM] to fully specify provisioning profile.

CODE_SIGN_STYLE = Automatic


// Development Team
//
// The team ID of a development team to use for signing certificates and provisioning profiles.

DEVELOPMENT_TEAM = 3UW6QGQDLG


// Code Signing Identity
//
// The name, also known as the *common name*, of a valid code-signing certificate in a
// keychain within your keychain path. A missing or invalid certificate will cause a
// build error.

CODE_SIGN_IDENTITY[sdk=iphoneos*] = iPhone Developer


// Info Plist File
//
// The project-relative path to the property list file that contains the `Info.plist` information
// used by bundles. For details on information property list files
// see [Information Property List](https://developer.apple.com/documentation/bundleresources/information_property_list).

INFOPLIST_FILE = $(TARGET_NAME)/.plist

// Product name
//
// This is the basename of the product generated by the target.

PRODUCT_NAME = $(TARGET_NAME)


// Enable Previews
//
// If enabled, the product will be built with options appropriate for supporting previews.

ENABLE_PREVIEWS = YES


// Runpath Search Paths (@rpath)
//
// This is a list of paths to be added to the `runpath` search path list for the image being created.
// At runtime, `dyld` uses the `runpath` when searching for dylibs whose load path begins with `@rpath/`.
// See [Dynamic Library Programming Topics](https://developer.apple.com/library/content/documentation/DeveloperTools/Conceptual/DynamicLibraries/000-Introduction/Introduction.html).

LD_RUNPATH_SEARCH_PATHS = $(inherited) @executable_path/Frameworks

// Framework Search Paths
//
// This is a list of paths to folders containing frameworks to be searched by the compiler for both
// included or imported header files when compiling C, Objective-C, C++, or Objective-C++, and by the
// linker for frameworks used by the product. Paths are delimited by whitespace, so any paths with spaces in them must be properly quoted.

FRAMEWORK_SEARCH_PATHS = $(inherited) $(SRCROOT)/../../BinaryTargets


// Always Embed Swift Standard Libraries
//
// Always embed the Swift standard libraries in the target's products, even if the target
// does not contain any Swift code.  For example, this should be enabled if the target is
// embedding other products which contain Swift, or if it is a test target which does not
// contain Swift but which is testing a product which does.  This setting only applies to
// wrapped products, not to standalone binary products.

ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = $(inherited)
